
if(MSVC)
	string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
	string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
endif()

if("${GDNATIVECPP_HOST}" STREQUAL "linux" AND "${GDNATIVECPP_TARGET}" STREQUAL "linux")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL Android)
	set(LIB_SUFFIX_DEBUG "android.${ANDROID_ABI}")
	set(LIB_SUFFIX_RELEASE "android.opt.${ANDROID_ABI}")
elseif(CMAKE_SYSTEM_NAME STREQUAL Emscripten)
	set(LIB_SUFFIX_DEBUG "javascript")
	set(LIB_SUFFIX_RELEASE "javascript.opt")
else()
	if(WIN32)
		set(LIB_SUFFIX_DEBUG "windows")
		set(LIB_SUFFIX_RELEASE "windows.opt")
	elseif(UNIX OR CMAKE_SYSTEM_NAME STREQUAL "Linux")
		set(LIB_SUFFIX_DEBUG "x11")
		set(LIB_SUFFIX_RELEASE "x11.opt")
	endif()

	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		set(LIB_SUFFIX_DEBUG "${LIB_SUFFIX_DEBUG}.64")
		set(LIB_SUFFIX_RELEASE "${LIB_SUFFIX_RELEASE}.64")
	else()
		set(LIB_SUFFIX_DEBUG "${LIB_SUFFIX_DEBUG}.32")
		set(LIB_SUFFIX_RELEASE "${LIB_SUFFIX_RELEASE}.32")
	endif()
endif()

if(MINGW)
	set(LIB_PREFIX "lib")
	set(LIB_SUFFIX ".a")
else()
	if(WIN32)
		if (MSVC)
			set(LIB_PREFIX "")
		else()
			set(LIB_PREFIX "lib")
		endif()
	else()
		set(LIB_PREFIX "lib")
	endif()
	set(LIB_SUFFIX "${CMAKE_STATIC_LIBRARY_SUFFIX}")
endif()

set(SRC ${CMAKE_CURRENT_LIST_DIR})
set(INC ${CMAKE_CURRENT_LIST_DIR}/../godot-cpp-cmake/godot-cpp)

set(LIBS )
set(LIB )
if("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
	set(LIB "${CMAKE_CURRENT_LIST_DIR}/../godot-cpp-cmake/lib/${LIB_PREFIX}godot-cpp.${LIB_SUFFIX_RELEASE}${LIB_SUFFIX}")
else()
	set(LIB "${CMAKE_CURRENT_LIST_DIR}/../godot-cpp-cmake/lib/${LIB_PREFIX}godot-cpp.${LIB_SUFFIX_DEBUG}${LIB_SUFFIX}")
endif()
if(CMAKE_SYSTEM_NAME STREQUAL Android AND NOT EXISTS "${LIB}")
	list(APPEND LIBS GodotCppLibrary)
else()
	add_library(godotcpp STATIC IMPORTED)
	set_target_properties(godotcpp PROPERTIES IMPORTED_LOCATION "${LIB}")
	list(APPEND LIBS $<TARGET_FILE:godotcpp>)
endif()

set(GDNATIVECPP_COMPAT_INCLUDE )
if(MSVC)
	list(APPEND GDNATIVECPP_COMPAT_INCLUDE "${PROJECT_SOURCE_DIR}/godot-cpp-cmake/include/compat/msvc")
else()
	if (MINGW)
		list(APPEND GDNATIVECPP_COMPAT_INCLUDE "${PROJECT_SOURCE_DIR}/godot-cpp-cmake/include/compat/mingw")
	endif()
endif()

include_directories("${SRC}" "${INC}/godot_headers" "${INC}/include" "${INC}/include/core" "${INC}/include/gen" "${INC}/godot-headers" ${GDNATIVECPP_COMPAT_INCLUDE})

set(SRCS )
list(APPEND SRCS "${SRC}/gdexample.cpp")
list(APPEND SRCS "${SRC}/gdlibrary.cpp")

set(INCS )
list(APPEND INCS "${SRC}/gdexample.h")

add_library(gdexample SHARED ${SRCS})
if(CMAKE_SYSTEM_NAME STREQUAL Android)
	add_dependencies(gdexample GodotCppLibrary)
else()
	add_dependencies(gdexample godotcpp)
endif()
target_link_libraries(gdexample ${LIBS})
target_compile_features(gdexample PUBLIC cxx_std_14)
